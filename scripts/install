#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

password=$YNH_APP_ARG_PASSWORD
app_nb=$YNH_APP_INSTANCE_NUMBER
ssh_port=$(grep "^Port" /etc/ssh/sshd_config | awk '{print $2}')

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_script_progression --message="Validating installation parameters..." --weight=2

# Validation du mot de passe SFTP
# Si SFTP est activé mais pas de mot de passe, on utilisera le mot de passe de l'utilisateur courant
if [ $with_sftp -eq 1 ] && [ -z "$password" ]; then
    ynh_print_info --message="No SFTP password provided, will use current user's password"
fi

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..." --weight=1

ynh_app_setting_set --app=$app --key=password --value=$password

#=================================================
# CREATE A MYSQL DATABASE
#=================================================

if [ $database != "none" ]; then
    ynh_script_progression --message="Creating a database..." --weight=2

    db_name=$(ynh_sanitize_dbid --db_name=$app)
    db_user=$db_name
    db_pwd=$(ynh_string_random --length=30)
    ynh_app_setting_set --app=$app --key=db_name --value=$db_name
    ynh_app_setting_set --app=$app --key=db_user --value=$db_user
    ynh_app_setting_set --app=$app --key=db_pwd --value=$db_pwd

    if [ $database == "mysql" ]; then
        ynh_mysql_setup_db --db_user=$db_user --db_name=$db_name --db_pwd=$db_pwd
    elif [ $database == "postgresql" ]; then
        ynh_psql_setup_db --db_user=$db_user --db_name=$db_name --db_pwd=$db_pwd
    fi
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring NGINX web server..." --weight=2

# Définir le répertoire racine PHP selon le mode d'installation
if [ "$install_mode" == "front_controller_public" ]; then
    # Pour le mode public, PHP_ROOT doit pointer vers /www/public
    php_root="$install_dir/www/public"
else
    # Pour les autres modes, PHP_ROOT pointe vers /www
    php_root="$install_dir/www"
fi

nginx_extra_conf_dir="/etc/nginx/conf.d/$domain.d/$app.d"
mkdir -p "$nginx_extra_conf_dir"

# Prepare nginx extra conf
if [ $phpversion != "none" ]
then
    ynh_add_config --template="nginx-php.conf" --destination="$nginx_extra_conf_dir/php.conf"
    YNH_PHP_VERSION="$phpversion"
fi

if [ $custom_error_file -eq 1 ]
then
    # Add the custom error build with the application
    ynh_add_config --template="nginx-code-error.conf" --destination="$nginx_extra_conf_dir/error-code.conf"
fi


# Configuration NGINX principale (toujours la même pour tous les modes)
ynh_add_nginx_config

# Ajouter la configuration try_files selon le mode d'installation
if [ "$install_mode" == "front_controller_public" ]; then
    ynh_add_config --template="nginx-tryfiles-frontcontroller-public.conf" --destination="$nginx_extra_conf_dir/try_files.conf"
elif [ "$install_mode" == "front_controller_www" ]; then
    ynh_add_config --template="nginx-tryfiles-frontcontroller-www.conf" --destination="$nginx_extra_conf_dir/try_files.conf"
else
    ynh_add_config --template="nginx-tryfiles-standard.conf" --destination="$nginx_extra_conf_dir/try_files.conf"
fi

ynh_add_config --template="example-custom-nginx-config.conf" --destination="$nginx_extra_conf_dir/sample.conf"

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..."

if [ $with_sftp -eq 1 ]
then
    groups="sftp.app"
else
    groups=""
fi

    ynh_system_user_create --username=$app --home_dir="$install_dir" --groups="$groups"

if [ $with_sftp -eq 1 ]
then
    # Add the password to this user
    if [ -n "$password" ]; then
        # Utiliser le mot de passe fourni
        chpasswd <<< "${app}:${password}"
    else
        # Pas de mot de passe fourni, l'utilisateur utilisera son mot de passe YunoHost actuel
        ynh_print_info --message="SFTP user created without specific password - will use current user's YunoHost password"
    fi
fi

#=================================================
# SPECIFIC SETUP
#=================================================
# MODIFY A CONFIG FILE
#=================================================

mkdir -p "$install_dir/www"

# Gestion des différents modes d'installation
case "$install_mode" in
  "standard")
    # Mode standard: index statique (comportement existant)
    ynh_add_config --template="../sources/www/index.php" --destination="$install_dir/www/index.php"
    ;;

  "front_controller_www")
    # Front controller à la racine /www (index.php reçoit toutes les requêtes)
    ynh_add_config --template="../sources/www/index.php" --destination="$install_dir/www/index.php"
    ;;

  "front_controller_public")
    # Front controller dans /www/public (ex: Laravel / Symfony)
    mkdir -p "$install_dir/www/public"
    ynh_add_config --template="../sources/www/index.php" --destination="$install_dir/www/public/index.php"
    ;;
  *)
    ynh_die --message="Unknown install_mode: $install_mode"
    ;;
esac

chown -R $app:www-data "$install_dir"
# Home directory of the user needs to be owned by root to allow
# SFTP connections
chown root:root "$install_dir"
setfacl -m g:$app:r-x "$install_dir"
setfacl -m g:www-data:r-x "$install_dir"
chmod 750 "$install_dir"

# Permissions spécifiques pour le mode front_controller_public
if [ "$install_mode" == "front_controller_public" ]; then
    # Droits sur www/public pour que le frontend (www-data) serve et écrive si besoin
    chown -R $app:www-data "$install_dir/www/public"
    # Créer les répertoires de cache/storage si l'app en a besoin
    mkdir -p "$install_dir/www/storage" "$install_dir/www/bootstrap/cache"
    chown -R $app:www-data "$install_dir/www/storage" "$install_dir/www/bootstrap/cache"
    chmod -R 750 "$install_dir/www/storage" "$install_dir/www/bootstrap/cache"
fi

#=================================================
# PHP-FPM CONFIGURATION
#=================================================

if [ $phpversion != "none" ]
then
    ynh_script_progression --message="Configuring PHP-FPM..." --weight=2

    # Create a dedicated PHP-FPM config
    ynh_add_fpm_config
fi

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed" --last
